size(600, 600);  // Size should be the first statement
stroke(255);     // Set line drawing color to black
fill(0)
background(0); //background to white
strokeWeight(1);

//where we map dom nodes to display nodes
var nodeHash = {};

var doc = ENV;

//config
var maxDepth = 0;

//walk tree to find the deepest point
function getMaxDepth(root) {
	
	function findMaxDepth(node) {
		var tmp = getDepth(node);
		maxDepth = (tmp>maxDepth)?tmp:maxDepth;
	}
	
	walkTree(root,findMaxDepth);
}

//generate an id based on a dom nodes props
function makeID(node) {
	var id = node.nodeName + "_" + getDepth(node) + "_" + getPosition(node);
	return id;
}

//getter for display nodes
function getNode(dom_node) {
	return nodeHash[makeID(dom_node)]||{};
}

//setter for display nodes
function setNode(dom_node,display_node) {
	var elID = makeID(dom_node);
	nodeHash[elID]=display_node;
}

//get the depth of a node
function getDepth(node) {
	var count = 0;
	var n = node;				
	while(n.parentNode && n.parentNode!=doc) {
		n=n.parentNode;	
		count++;
	}
	return count;
}

//get the lateral position for a node
function getPosition(node) {
	var count = 0;
	var n = node;				
	while(n.previousSibling) {
		n=n.previousSibling;	
		count++;
	}
	return count;
}

//get the total number of sibling nodes
function getNumSiblings(node) {
	return node.parentNode.childNodes.length;
}

//depth first dom traversal
function walkTree(node,cb) {
	
	if(!node) return; //bail if null
	
	//process node
	cb(node);				
	
	//helper 
	function getNextNode(node) {
		var n = node;			
		while(n.parentNode && n.parentNode!=doc.documentElement) {
			n=n.parentNode;					
			if(n.nextSibling) return n.nextSibling;
		}
		return n.nextSibling;
	}				
					
	if(node.firstChild) {
		setTimeout(function(){walkTree(node.firstChild,cb)},1);
	} else if(node.nextSibling) {
		setTimeout(function(){walkTree(node.nextSibling,cb)},1);
	} else {
		setTimeout(function(){walkTree(getNextNode(node),cb)},1);
	}
	
}

//process each node as we walk the tree
function processNode(node) {

//	println(node.nodeName);
					
	//draw the top level node
	if(node.parentNode===doc) {
		var box = drawNode(calculateNode(null,node));
		setNode(node,box);
	}

	
	if(node.childNodes) {
		var arr = node.childNodes;
		for(var i=0;i<arr.length;i++) {
			var box = drawNode(calculateNode(node,arr[i]));
			setNode(arr[i],box);
		}
	}

	
}

//calculate where the node will go
function calculateNode(parent,current) {
	
	//top level node
	if(!parent) {
		return {x:0,y:0,h:(height/(maxDepth+1)),w:width,name:current.nodeName}; //big
	}
	
	var displayNode = getNode(parent);
	var nodeWidth = (displayNode.hasAttribute("width"))?parseInt(displayNode.getAttribute("width")):1;
	var left = (displayNode.hasAttribute("x"))?parseInt(displayNode.getAttribute("x")):parseInt(displayNode.getAttribute("x1"));
	//var top = parseInt(displayNode.getAttribute("y"));			
	var sibsLen = getNumSiblings(current);
	var offset = (nodeWidth/sibsLen);
	var nodeDepth = getDepth(current);
	var nodePos = getPosition(current);
	
	//final values
	var currLeft = ((nodePos*offset)+left);
	var currTop = nodeDepth*(height/(maxDepth+1));
	var currWidth = offset;
	var currHeight = (height/(maxDepth+1));
	
	//println(current.nodeName+" "+nodePos+" "+sibsLen+" "+nodeWidth+" "+nodeDepth+" "+offset+" "+left)
	
	//println({x:currLeft, y:currTop, w:currWidth, h:currHeight,name:current.nodeName}.toSource())
	
	return {x:currLeft, y:currTop, w:currWidth, h:currHeight,name:current.nodeName};

}

//draw the display node
function drawNode(obj) {

//	println(parseInt(obj.x)+" "+parseInt(obj.y)+" "+parseInt(obj.w)+" "+parseInt(obj.h)+" "+obj.name)
	
	if(obj.w > 1)
		var box = rect(obj.x,obj.y,obj.w,obj.h);	
	else	
		var box = line(obj.x,obj.y,(obj.w+obj.x),(obj.h+obj.y));			
				
	return box;
}

function displayDOM() {
	getMaxDepth(doc.documentElement); 
	walkTree(doc.documentElement,processNode);
}

displayDOM();