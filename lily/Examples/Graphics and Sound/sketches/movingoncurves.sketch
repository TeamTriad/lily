//http://www.processing.org/learning/examples/movingoncurves.html

// Variables for first ellipse
var e1_size = 18;
var e1_x = 0;
var e1_y = 0;
var e1_speed = 1.0;
var e1_direction = 1;

// Variables for second ellipse
var e2_size = 10;
var e2_x = 0;
var e2_y = 0;
var e2_speed = 0.80;
var e2_direction = 1;

// Variables for third ellipse
var e3_size = 14;
var e3_x = 0;
var e3_y = 0;
var e3_speed = 0.65;
var e3_direction = 1;

function setup() 
{
  size(200, 200);
  stroke(102);
  smooth();
  frameRate(30);
}

function draw() 
{
  background(0);
  
  noFill();
  stroke(102);
  
  beginShape();
  for(var i=0; i<width; i++) {
   vertex(i, singraph(i/width)*height);
  }
  endShape();
  
  beginShape();
  for(var i=0; i<width; i++) {
   vertex(i, myquad(i/width)*height);
  }
  endShape();
  
  beginShape();
  for(var i=0; i<width; i++) {
   vertex(i, hump(i/width)*height);
  }
  endShape();
  
  e1_x += e1_speed * e1_direction;
  if (e1_x > width || e1_x < 0) {
    e1_direction = e1_direction * -1;
  }
  e1_y = singraph(e1_x/width)*height;

  
  noStroke();
  fill(255);
  ellipse(e1_x, e1_y, e1_size, e1_size);
  
  e2_x += e2_speed * e2_direction;
  if (e2_x > width || e2_x < 0) {
    e2_direction = e2_direction * -1;
  }
  e2_y = myquad(e2_x/width)*height;
  noStroke();
  fill(255);
  ellipse(e2_x, e2_y, e2_size, e2_size);
  
  e3_x += e3_speed * e3_direction;
  if (e3_x > width || e3_x < 0) {
    e3_direction = e3_direction * -1;
  }
  e3_y = hump(e3_x/width)*height;
  noStroke();
  fill(255);
  ellipse(e3_x, e3_y, e3_size, e3_size);

}

function singraph(sa) {
  sa = (sa - 0.5) * 1.0; //scale from -1 to 1
  sa = sin(sa*PI)/2 + 0.5;
  return sa;
}

function myquad(sa) {
  return sa*sa*sa*sa;
}

function hump(sa) {
  sa = (sa - 0.5) * 2; //scale from -2 to 2
  sa = sa*sa;
  if(sa > 1) { sa = 1; }
  return 1-sa;
}