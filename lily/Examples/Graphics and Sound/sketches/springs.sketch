//http://www.processing.org/learning/examples/springs.html

var num = 3; 
var springs = new Array(num)	; 

function setup()
{
  size(200, 200);
  noStroke(); 
  smooth();
  springs[0] = new Spring( 70, 160,  20, 0.98, 8.0, 0.1, springs, 0); 
  springs[1] = new Spring(150, 110,  60, 0.95, 9.0, 0.1, springs, 1); 
  springs[2] = new Spring( 40,  70, 120, 0.90, 9.9, 0.1, springs, 2); 
  frameRate(60);
}

function draw() 
{
  background(51); 
  
  for(var i=0; i<num; i++) { 
    springs[i].update(); 
    springs[i].draw(); 
  }  
}

function mousePressed() 
{
  for(var i=0; i<num; i++) { 
    springs[i].pressed(); 
  } 
}

function mouseReleased() 
{
  for(var i=0; i<num; i++) { 
    springs[i].released(); 
  } 
}

function Spring(x, y, s, d, m, k_in, others, id) 
{ 
  // Screen values 
  var xpos=0;
  var ypos=0;
  var tempxpos=0;
  var tempypos=0; 
  var mysize = 20; 
  this.isOver = false; 
  var move = false; 

  // Spring simulation constants 
  var mass=0;       // Mass 
  var k = 0.2;    // Spring constant 
  var damp=0;       // Damping 
  var rest_posx=0;  // Rest position X 
  var rest_posy=0;  // Rest position Y 

  // Spring simulation variables 
  //var pos = 20.0; // Position 
  var velx = 0.0;   // X Velocity 
  var vely = 0.0;   // Y Velocity 
  var accel = 0;    // Acceleration 
  var force = 0;    // Force 

  var friends=[];
  var me=null;

  //init vars
  xpos = tempxpos = x; 
  ypos = tempypos = y;
  rest_posx = x;
  rest_posy = y;
  mysize = s;
  damp = d; 
  mass = m; 
  k = k_in;
  friends = others;
  me = id; 

  this.update=function() 
  { 
    if(move) { 
      rest_posy = mouseY; 
      rest_posx = mouseX;
    } 

    force = -k * (tempypos - rest_posy);  // f=-ky 
    accel = force / mass;             // Set the acceleration, f=ma == a=f/m 
    vely = damp * (vely + accel);     // Set the velocity 
    tempypos = tempypos + vely;               // Updated position 

    force = -k * (tempxpos - rest_posx);  // f=-ky 
    accel = force / mass;             // Set the acceleration, f=ma == a=f/m 
    velx = damp * (velx + accel);     // Set the velocity 
    tempxpos = tempxpos + velx;               // Updated position 

    
    if((over() || move) && !otherOver() ) { 
      this.isOver = true; 
    } else { 
      this.isOver = false; 
    } 
  } 
  
  // Test to see if mouse is over this spring
  function over() {
    var disX = tempxpos - mouseX;
    var disY = tempypos - mouseY;
    if(sqrt(sq(disX) + sq(disY)) < mysize/2 ) {
      return true;
    } else {
      return false;
    }
  }
  
  // Make sure no other springs are active
  function otherOver() {
    for(var i=0; i<num; i++) {
      if(i != me) {
        if (friends[i].over == true) {
          return true;
        }
      }
    }
    return false;
  }

  this.draw=function() 
  { 
    if(this.isOver) { 
      fill(153); 
    } else { 
      fill(255); 
    } 
    ellipse(tempxpos, tempypos, mysize, mysize);
  } 

  this.pressed=function() 
  { 
    if(this.isOver) { 
      move = true; 
    } else { 
      move = false; 
    }  
  } 

  this.released=function() 
  { 
    move = false; 
    rest_posx = xpos;
    rest_posy = ypos;
  } 
} 